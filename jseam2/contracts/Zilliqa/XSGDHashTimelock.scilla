scilla_version 0

(* XSGDHashTimelock contract *)

(***************************************************)
(*               Associated library                *)
(***************************************************)
import BoolUtils

library XSGDHashTimelock

let one_msg =
  fun (msg : Message) =>
  let nil_msg = Nil {Message} in
  Cons {Message} msg nil_msg

let zero_amount = Uint128 0

(* Use a keccak256 hash *)
let hashlockMatches =
    fun (hashlock : Option ByStr32) => fun (preimage : String) =>
    match hashlock with
    | None => False
    | Some hashlock =>
        let computeHash = builtin keccak256hash preimage in
        builtin eq hashlock computeHash
    end

let realBoolValue =
   fun (boolValue : Option Bool) =>
   match boolValue with
   | None => False
   | Some value =>
      value
   end

let futureTimelock =
    fun (timelock : Uint128) =>
    fun (current_block : BNum) =>
    let zero_block = BNum 0 in
    let timelock_block = builtin badd zero_block timelock in
    builtin blt current_block timelock_block

let already_refunded                      = Uint32 1
let already_withdrawn                     = Uint32 2
let contract_id_does_not_exist            = Uint32 3
let contract_id_exists                    = Uint32 4
let amount_not_positive                   = Uint32 5
let timelock_not_in_future                = Uint32 6
let timelock_in_progress                  = Uint32 7
let preimage_does_not_match               = Uint32 8
let not_receiver                          = Uint32 9
let not_sender                            = Uint32 10


(***************************************************)
(*             The contract definition             *)
(***************************************************)

contract XSGDHashTimelock (tokenAddress : ByStr20)

(* Map the hash of contract which serves as id -> params *)
(* This is equivalent to solidity *)
(* mapping (bytes32 => Contract) contracts *)
field contract_sender       : Map ByStr32 ByStr20 = Emp ByStr32 ByStr20
field contract_seceiver     : Map ByStr32 ByStr20 = Emp ByStr32 ByStr20
field contract_amount       : Map ByStr32 Uint128 = Emp ByStr32 Uint128
field contract_hashlock     : Map ByStr32 ByStr32 = Emp ByStr32 ByStr32
field contract_timelock     : Map ByStr32 Uint128 = Emp ByStr32 Uint128
field contract_withdrawn    : Map ByStr32 Bool = Emp ByStr32 Bool
field contract_refunded     : Map ByStr32 Bool = Emp ByStr32 Bool
field contract_preimage     : Map ByStr32 String = Emp ByStr32 String


transition newContract (
    receiver : ByStr20, 
    hashlock : ByStr32, 
    timelock : Uint128
    amount : Uint128
)
    (* Checks *)
    (* Skip tokens transferrable check as it is not possible to query field values in current scilla*)
    (* Rely on failure to execute on XSGD smart conntract *)
    is_amount_valid = builtin lt zero_amount amount;

    current_block <- & BLOCKNUMBER;
    is_future_timelock = futureTimelock timelock currentBlock;

    match is_future_timelock with
    | True =>
        match is_amount_valid with
        | True =>
            (* Generate contractId *)
            sender_str = builtin to_string _sender;
            timelock_str = builtin to_string timelock;
            amount_str = builtin to_string amount;

            merge1 = builtin concat amount_str timelock_str;
            merge2 = builtin concat receiver hashlock;
            merge2_str = builtin to_string merge2;
            merge =  builtin concat merge2_str merge1;
            final = builtin concat sender_str merge;
            contractId = builtin keccak256hash final;

            is_contract_id_exists <- exists contract_sender[contractId];

            match is_contract_id_exists with
            | True =>
                e = { _eventname : "error"; code : contract_id_exist};
                event e
            | False =>
                (* set up contractId mapping *)
                contract_sender[contractId] :=  _sender;
                contract_receiver[contractId] := receiver;
                contract_amount[contractId] :=  amount;
                contract_hashlock[contractId] := hashlock;
                contract_timelock[contractId] := timelock;
                is_withdrawn = False;
                contract_withdrawn[contractId] := is_withdrawn;
                is_refunded = False;
                contract_refunded[contractId] := is_refunded;

                e = { 
                    _eventname : "NewContract"; 
                    contractId : contractId; 
                    sender : _sender; 
                    receiver : receiver; 
                    amount : amount; 
                    hashlock : hashlock;  
                    timelock : timelock
                };
                event e;

                (* Call TransferFrom on XSGD Proxy Contract to transfer XSGD to contract *)
                msg = {
                    _tag : "TransferFrom"; 
                    _recipient : tokenAddress;
                    _amount : zero_amount;
                    from : _sender;
                    to : _this_address;
                    amount: amount
                };
                msgs = one_msg msg;
                send msgs
            end
        | False =>
            e = { _eventname : "error"; code : amount_not_positive};
            event e
        end
    | False =>
        e = { _eventname : "error"; code : timelock_not_in_future};
        event e
    end
end


(* Convenience function *)
transition getContract (ByStr32 _contractId)
    is_contract_id_exists <- exists contract_sender[_contractId];
    
    match is_contract_id_exists with
    | True =>
        sender      <- contract_sender[_contractId];
        receiver    <- contract_receiver[_contractId];
        amount      <- contract_amount[_contractId];
        hashlock    <- contract_hashlock[_contractId];
        timelock    <- contract_timelock[_contractId];
        withdrawn   <- contract_withdrawn[_contractId];
        refunded    <- contract_refunded[_contractId];

        is_preimage_exists <- exists contract_preimage[_contractId];

        match is_preimage_exists with
        | True =>
            (* return contract details with preimage *)
            preimage <- contract_preimage[_contractId];

            e = {
                _eventname: "getContract";
                sender: sender;
                receiver: receiver;
                amount: amount;
                hashlock: hashlock;
                timelock : timelock;
                withdrawn : withdrawn;
                refunded : refunded;
                preimage : preimage;
            }
            event e;

        | False =>
            (* return contract details without preimage *)
            e = {
                _eventname: "getContract";
                contractId: _contractId;
                sender: sender;
                receiver: receiver;
                amount: amount;
                hashlock: hashlock;
                timelock : timelock;
                withdrawn : withdrawn;
                refunded : refunded;
            }
            event e;

        end
        
    | False => 
        e = {
            _eventname: "error";
            code: contract_id_does_not_exist
        }
        event e;
    end
    
end


transition withdraw (_contractId : ByStr32, _preimage : ByStr32)
    current_block <- & BLOCKNUMBER;
    is_contract_id_exists <- exists contract_sender[_contractId];

    (* Check if contract exists *)
    match is_contract_id_exists with
    | True =>
        (* Check if receiver *)
        receiver <- contract_receiver[_contractId];
        is_receiver = builtin eq receiver _sender;

        match is_receiver with
        | True =>
            (* Check if refunded *)
            refunded <- contract_refunded[_contractId];
            is_refunded = realBoolValue refunded;
            is_not_refunded = negb is_refunded;

            match is_not_refunded with 
            | True =>
                (* Check if withdrawn *)
                withdrawn <- contract_withdrawn[_contractId];
                is_withdrawn = realBoolValue withdrawn;
                is_not_withdrawn = negb is_withdrawn;

                match is_not_withdrawn with
                | True =>
                    (* Check if hashlock matches *)
                    hashlock <- contract_hashlock[_contractId];
                    is_preimage_match = hashLockMatches hashlock _preimage;

                    match is_preimage_match with
                    | True =>
                        (* Good to go *)
                        (* Update contract details *)
                        is_withdrawn = True;
                        contract_withdrawn[_contractId] := is_withdrawn;
                        contract_preimage[_contractId] := preimage;

                        amount <- contract_amount[_contractId];
                        sender <- contract_sender[_contractId];
                        timelock <- contract_timelock[_contractId];

                        e = {
                            _eventname: "Withdraw";
                            contractId: _contractId;
                            sender: sender;
                            receiver: receiver;
                            amount: amount;
                            hashlock: hashlock;
                            timelock : timelock;
                            withdrawn : is_withdrawn;
                            refunded : refunded;
                            preimage : preimage;
                        }

                        (* Transfer tokens *)
                        msg = {
                            _tag : "Transfer"; 
                            _recipient : tokenAddress;
                            _amount : zero_amount;
                            to : receiver;
                            amount: amount
                        };
                        msgs = one_msg msg;
                        send msgs

                    | False =>
                        e = { _eventname : "error"; code : preimage_does_not_match};
                    end 
                | False =>
                    e = { _eventname: "error", code : already_withdrawn};
                    event e
                end
            | False =>
                e = { _eventname: "error", code: already_refunded};
                event e
            end
        | False =>
            e = { _eventname: "error"; code : not_receiver};
            event e
        end
    | False =>
        e = { _eventname : "error"; code : contract_id_does_not_exist};
        event e
    end
end


transition refund (_contractId : ByStr32)
    is_contract_id_exists <- exists contract_sender[_contractId];

    (* Check if contract exists *)
    match is_contract_id_exists with
    | True =>
        (* Check if sender *)
        sender <- contract_sender[_contractId];
        is_sender = builtin eq sender _sender;

        match is_sender with
        | True =>
            (* Check if refunded *)
            refunded <- contract_refunded[_contractId];
            is_refunded = realBoolValue refunded;
            is_not_refunded = negb is_refunded;

            match is_not_refunded with 
            | True =>
                (* Check if withdrawn *)
                withdrawn <- contract_withdrawn[_contractId];
                is_withdrawn = realBoolValue withdrawn;
                is_not_withdrawn = negb is_withdrawn;

                match is_not_withdrawn with
                | True =>
                    (* Check if timelock has passed *)
                    current_block <- & BLOCKNUMBER;
                    timelock <- contract_timelock[_contractId];
                    is_timelocked = futureTimelock timelock current_block;
                    is_not_timelocked = negb is_timelocked;

                    match is_not_timelocked with
                    | True =>
                        (* Good to go *)
                        (* Update contract details *)
                        is_refunded = True;
                        contract_refunded[_contractId] := is_refunded;

                        amount <- contract_amount[_contractId];
                        receiver <- contract_receiver[_contractId];
                        hashlock <- contract_hashlock[_contractId];

                        e = {
                            _eventname: "Refund";
                            contractId: _contractId;
                            sender: sender;
                            receiver: receiver;
                            amount: amount;
                            hashlock: hashlock;
                            timelock : timelock;
                            withdrawn : withdrawn;
                            refunded : is_refunded;
                        }

                        (* Transfer tokens *)
                        msg = {
                            _tag : "Transfer"; 
                            _recipient : tokenAddress;
                            _amount : zero_amount;
                            to : sender;
                            amount: amount
                        };
                        msgs = one_msg msg;
                        send msgs

                    | False =>
                        e = { _eventname : "error"; code : timelock_in_progress};
                    end 
                | False =>
                    e = { _eventname: "error", code : already_withdrawn};
                    event e
                end
            | False =>
                e = { _eventname: "error", code: already_refunded};
                event e
            end
        | False =>
            e = { _eventname: "error"; code : not_receiver};
            event e
        end
    | False =>
        e = { _eventname : "error"; code : contract_id_does_not_exist};
        event e
    end
end
